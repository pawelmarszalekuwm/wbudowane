#include "xc.h"
#include "libpic30.h"
#include "adc.h"
#include "buttons.h"

// =====================
// Konfiguracja systemu
// =====================
#pragma config POSCMOD = XT
#pragma config OSCIOFNC = ON
#pragma config FCKSM = CSDCMD
#pragma config FNOSC = PRI
#pragma config IESO = ON

#pragma config WDTPS = PS32768
#pragma config FWPSA = PR128
#pragma config WINDIS = ON
#pragma config FWDTEN = ON
#pragma config ICS = PGx2
#pragma config GWRP = OFF
#pragma config GCP = OFF
#pragma config JTAGEN = OFF

// =====================
// Stałe
// =====================
#define ALARM_THRESHOLD (1023 / 2)
#define FLASH_COUNT 8
#define FLASH_DELAY_CHUNKS 25
#define FLASH_DELAY 50000
#define BUTTON_DEBOUNCE_DELAY 40000

// =====================
// Inicjalizacja
// =====================
void init(void) {
    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);
    TRISA = 0x0000;
    LATA = 0x0000;
    BUTTON_Enable(BUTTON_S3);
}

// =====================
// Pomocnicze funkcje
// =====================
int is_button_stably_pressed(void) {
    __delay32(BUTTON_DEBOUNCE_DELAY);
    return BUTTON_IsPressed(BUTTON_S3);
}

int read_valid_adc(void) {
    unsigned int val = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
    return (val != 0xFFFF) ? val : -1;
}

int cancel_condition_met(unsigned int threshold) {
    int val = read_valid_adc();
    if (val >= 0 && val < threshold) return 1;
    if (BUTTON_IsPressed(BUTTON_S3) && is_button_stably_pressed()) return 1;
    return 0;
}

void flash_led_with_interrupt(unsigned int threshold, unsigned char *alarm_on) {
    for (int i = 0; i < FLASH_COUNT; i++) {
        // LED ON
        LATA = 0x0001;
        for (int j = 0; j < FLASH_DELAY_CHUNKS; j++) {
            __delay32(FLASH_DELAY);
            if (cancel_condition_met(threshold)) {
                *alarm_on = 0;
                LATA = 0x0000;
                return;
            }
        }

        // LED OFF
        LATA = 0x0000;
        for (int j = 0; j < FLASH_DELAY_CHUNKS; j++) {
            __delay32(FLASH_DELAY);
            if (cancel_condition_met(threshold)) {
                *alarm_on = 0;
                return;
            }
        }
    }

    // Końcowa decyzja
    int final_val = read_valid_adc();
    if (final_val >= 0 && final_val >= threshold) {
        LATA = 0xFFFF;
    } else {
        *alarm_on = 0;
        LATA = 0x0000;
    }
}

// =====================
// Funkcja główna
// =====================
int main(void) {
    init();

    unsigned char alarm_on = 0;
    unsigned char previous_button_state = BUTTON_IsPressed(BUTTON_S3) ? 0 : 1;

    while (1) {
        int adc_val = read_valid_adc();
        if (adc_val < 0) {
            __delay32(400);
            continue;
        }

        unsigned char current_button_state = BUTTON_IsPressed(BUTTON_S3) ? 0 : 1;

        // Obsługa przycisku
        if (previous_button_state == 1 && current_button_state == 0 && is_button_stably_pressed()) {
            alarm_on = 0;
            LATA = 0x0000;
        }
        previous_button_state = current_button_state;

        // Obsługa alarmu
        if (!alarm_on && adc_val > ALARM_THRESHOLD) {
            alarm_on = 1;
            flash_led_with_interrupt(ALARM_THRESHOLD, &alarm_on);
        } else if (alarm_on && adc_val < ALARM_THRESHOLD) {
            alarm_on = 0;
            LATA = 0x0000;
        }

        __delay32(1000);
    }

    return 0;
}
