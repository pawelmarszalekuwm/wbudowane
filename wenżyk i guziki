/*
 * File:   newmainXC16.c
 * Author: local
 *
 * Created on April 17, 2025, 11:50 AM
 */

// PIC24FJ128GA010 Configuration Bit Settings

// 'C' source line config statements

// CONFIG2
#pragma config POSCMOD = XT             // Primary Oscillator Select (XT Oscillator mode selected)
#pragma config OSCIOFNC = ON            // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as port I/O (RC15))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = PRI              // Oscillator Select (Primary Oscillator (XT, HS, EC))
#pragma config IESO = ON                // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) enabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = ON              // Watchdog Timer Enable (Watchdog Timer is enabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator/debugger uses EMUC2/EMUD2)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include "xc.h"
#include "libpic30.h"

int main(void) {
    
//    unsigned portValue = 0x0001;
//    while(1){
//        LATA = portValue;
//        portValue++;
//        __delay32(200);
//    }
    
    
    
    
    unsigned portValue = 0x0001;
    char aktualny6 = 0, poprzedni6=0, aktualny7=0, poprzedni7=0; //zmienne do obslugi przyciskow 
    
    //dostep do portow 
    TRISA = 0x0000; //port a na wyjscie
    TRISD = 0xFFFF; //port d na wyjscie
    
    int value = 1;
    unsigned ones1 = 0;
    unsigned tens1 = 0;
    unsigned ones2 = 9;
    unsigned tens2 = 9;
    unsigned char liczba;
    int position;
    unsigned char wezyk[]={
        0b00000111,
        0b00001110,
        0b00011100,
        0b00111000,
        0b01110000,
        0b11100000,
        0b01110000,
        0b00111000,
        0b00011100,
        0b00001110,
        0b00000111
    };

    
    while(1){
        switch(value){
            case 1:
                LATA = portValue;
                portValue++;
                __delay32(500000);
                break;
            case 2:
                LATA = portValue;
                portValue--;
                __delay32(500000);
                break;
            case 3:
                LATA = portValue ^ (portValue >> 1);
                portValue++;
                __delay32(500000);
                break;
            case 4:
                LATA = portValue ^ (portValue << 1);
                portValue--;
                __delay32(500000);
                break;
                
            case 5:
                liczba = 0;
                if(liczba > 99) liczba = 0;
                while(liczba<=99){
                    LATA = (liczba / 10 << 4) | (liczba % 10);
                    __delay32(500000);
                    liczba++;
                }
            case 6:
                liczba = 99;
                if(liczba < 0) liczba = 99;
                while(liczba>=0){
                    LATA = (liczba / 10 << 4) | (liczba % 10);
                    __delay32(500000);
                    liczba--;
                }
            case 7:
                position = 0;
                while(1){
                    LATA = wezyk[position];
                __delay32(1000000);
                position++;
                if(position > 10)position =0;
                }
                
        }
        
        poprzedni6 = PORTDbits.RD6;
        poprzedni7 = PORTDbits.RD7;
        __delay32(150000);
        aktualny6 = PORTDbits.RD6;
        aktualny7 = PORTDbits.RD7;
        
        if (aktualny6 - poprzedni6 == 1) //przycisk do gory 
        {
            value--;
            portValue=1;
            if(value <= 0){
                value=7;
            }
        }
        if(aktualny7 - poprzedni7 == 1)
        {
            value++;
            portValue=1;
            if(value >= 8){
                value = 1;
            }
        }
    }
    return 0;
}
